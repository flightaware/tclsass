# Commands covered:  sass
#
# This file contains a collection of tests for one or more of the Tcl
# package commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Written by Joe Mistachkin.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.

if {[lsearch [namespace children] ::tcltest] == -1} then {
  package require tcltest
  namespace import ::tcltest::*
}

set path [file normalize [file dirname [info script]]]
package require sass

###############################################################################

if {[llength [info commands appendArgs]] == 0} then {
  proc appendArgs { args } {
    set result ""; eval append result $args
  }
}

###############################################################################

if {[llength [info commands getEnvVar]] == 0} then {
  proc getEnvVar { name } {
    return [expr {[info exists ::env($name)] ? $::env($name) : ""}]
  }
}

###############################################################################

if {[llength [info commands getDictValue]] == 0} then {
  proc getDictValue { dictionary name {default ""} {wrap ""} } {
    if {[llength [info commands dict]] > 0} then {
      if {[dict exists $dictionary $name]} then {
        return [appendArgs $wrap [dict get $dictionary $name] $wrap]
      }
      return $default
    } else {
      foreach {pairName pairValue} $dictionary {
        if {$pairName eq $name} then {
          return [appendArgs $wrap $pairValue $wrap]
        }
      }
      return $default
    }
  }
}

###############################################################################

if {[llength [info commands getTempPath]] == 0} then {
  proc getTempPath {} {
    global tcl_platform
    set names [list]
    foreach name [list TEMP TMP] {
      lappend names [string toupper $name] [string tolower $name] \
          [string totitle $name]
    }
    foreach name $names {
      set value [getEnvVar $name]
      if {[string length $value] > 0} then {
        return [file normalize $value]
      }
    }
    if {[info exists tcl_platform(platform)]} then {
      if {$tcl_platform(platform) ne "windows"} then {
        return /tmp; # TODO: Good default on Unix?
      }
    }
    error "no temporary path is available"
  }
}

###############################################################################

set scss(1) {
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

.box { @include border-radius(10px); }
}

###############################################################################

set scss(2) {
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
  width: 31.123456%;
}
}

###############################################################################

test sass-1.1 {overall command usage} -body {
  list [catch {sass} errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {1 {wrong # args: should be "sass option ?arg ...?"}}

###############################################################################

test sass-2.1 {version sub-command usage} -body {
  list [catch {sass version foo} errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {1 {wrong # args: should be "sass version"}}

###############################################################################

test sass-2.2 {version sub-command output} -body {
  sass version
} -match regexp -result {^libsass\
\d+\.\d+\.\d+(?:-\d+(?:-g[0-9a-f]+(?:-dirty)?)?|-beta\.\d+(?:-dirty)?)?$}

###############################################################################

test sass-3.1 {compile sub-command usage} -body {
  list [catch {sass compile} errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {1 {wrong # args: should be "sass compile ?options? source"}}

###############################################################################

test sass-3.2 {compile sub-command compile error} -body {
  set dictionary [sass compile ""]

  list [getDictValue $dictionary errorStatus] \
      [getDictValue $dictionary outputString] \
      [getDictValue $dictionary sourceMapString] \
      [getDictValue $dictionary errorMessage]
} -cleanup {
  unset -nocomplain dictionary
} -result {3 {} {} {Internal Error: Data context created with empty source string
}}

###############################################################################

test sass-3.3 {compile sub-command syntax error} -body {
  set dictionary [sass compile test]

  list [getDictValue $dictionary errorStatus] \
      [getDictValue $dictionary outputString] \
      [getDictValue $dictionary sourceMapString] \
      [getDictValue $dictionary errorMessage]
} -cleanup {
  unset -nocomplain dictionary
} -result {1 {} {} Error:\ Invalid\ CSS\ after\ \"test\":\ expected\ \"\{\",\ was\ \"\"\n\ \ \ \ \ \ \ \ on\ line\ 1\ of\ stdin\n>>\ test\n\ \ \ ^\n}

###############################################################################

test sass-3.4 {compile sub-command output} -body {
  set dictionary [sass compile $scss(1)]

  list [getDictValue $dictionary errorStatus] \
      [getDictValue $dictionary outputString] \
      [getDictValue $dictionary sourceMapString] \
      [getDictValue $dictionary errorMessage]
} -cleanup {
  unset -nocomplain dictionary
} -result {0 {.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }
} {} {}}

###############################################################################

test sass-3.5 {compile sub-command output w/data} -body {
  set dictionary [sass compile -type data $scss(1)]

  list [getDictValue $dictionary errorStatus] \
      [getDictValue $dictionary outputString] \
      [getDictValue $dictionary sourceMapString] \
      [getDictValue $dictionary errorMessage]
} -cleanup {
  unset -nocomplain dictionary
} -result {0 {.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }
} {} {}}

###############################################################################

test sass-3.6 {compile sub-command output w/good file} -body {
  sass compile -type file -options \
      [list input_path [file join $path good.scss]] \
      [file join $path good.scss]
} -result {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333; }
}}

###############################################################################

test sass-3.7 {compile sub-command w/helper procedure} -body {
  tclsass::compileWithSass -type file [file join $path good.scss]
} -cleanup {
  unset -nocomplain fileName
} -result {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333; }
}}

###############################################################################

set fileName [file join $path bad.scss]

###############################################################################

test sass-3.8 {compile sub-command output w/bad file} -body {
  sass compile -type file -options \
      [list input_path $fileName] $fileName
} -cleanup {
  unset -nocomplain fileName
} -result \
[subst {errorStatus 1 errorMessage {Error: Invalid CSS after "T": expected 1 selector or at-rule, was "This is not good SC"
        on line 1 of tests/bad.scss
>> This is not good SCSS.
   ^
} errorLine 1 errorColumn 1}]

###############################################################################

unset -nocomplain fileName

###############################################################################

test sass-4.1 {malformed options} -body {
  list [catch {
    sass compile -options [list foo] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {1 {malformed dictionary
}}

###############################################################################

test sass-4.2 {option unknown} -body {
  list [catch {
    sass compile -options [list foo bar] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {1 {unknown option, must be: precision, output_style,\
source_comments, source_map_embed, source_map_contents, omit_source_map_url,\
is_indented_syntax_src, indent, linefeed, input_path, output_path, image_path,\
include_path, or source_map_file
}}

###############################################################################

test sass-4.3 {option precision (int)} -body {
  list [catch {
    sass compile -options [list precision 2] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list precision x] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31.123456%; }
}} 1 {expected integer but got "x"}}

###############################################################################

test sass-4.4 {option output_style (enum)} -body {
  list [catch {
    sass compile -options [list output_style compressed] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list output_style x] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 0 outputString {body{font:100%\
Helvetica,sans-serif;color:#333;width:31.123456%}
}} 1 {unsupported output style,\
must be: nested, expanded, compact, or compressed
}}

###############################################################################

test sass-4.5 {option source_comments (bool)} -body {
  list [catch {
    sass compile -options [list source_comments true] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list source_comments x] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 0 outputString {/* line 5, stdin */
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31.123456%; }
}} 1 {expected boolean value but got "x"}}

###############################################################################

test sass-4.6 {option source_map_embed (bool)} -body {
  list [catch {
    sass compile -options [list source_map_embed true] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list source_map_embed x] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31.123456%; }

/*# sourceMappingURL=data:application/json;base64,ewoJInZlcnNpb24iOiAzLAoJImZpbGUiOiAic3RkaW4uY3NzIiwKCSJzb3VyY2VzIjogWwoJCSJzdGRpbiIKCV0sCgkibmFtZXMiOiBbXSwKCSJtYXBwaW5ncyI6ICJBQUlBLEFBQUEsSUFBSSxDQUFDO0VBQ0gsSUFBSSxFQUFFLElBQUksQ0FKQyxTQUFTLEVBQUUsVUFBVTtFQUtoQyxLQUFLLEVBSlMsSUFBSTtFQUtsQixLQUFLLEVBQUUsVUFBVSxHQUNsQiIKfQ== */}} 1 {expected boolean value but got "x"}}

###############################################################################

test sass-4.7 {option source_map_contents (bool)} -body {
  list [catch {
    sass compile -options [list source_map_contents true] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list source_map_contents x] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31.123456%; }
}} 1 {expected boolean value but got "x"}}

###############################################################################

test sass-4.8 {option omit_source_map_url (bool)} -body {
  list [catch {
    sass compile -options [list omit_source_map_url true] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list omit_source_map_url x] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31.123456%; }
}} 1 {expected boolean value but got "x"}}

###############################################################################

test sass-4.9 {option is_indented_syntax_src (bool)} -body {
  list [catch {
    sass compile -options [list is_indented_syntax_src true] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list is_indented_syntax_src x] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 1 errorMessage Error:\ Invalid\ CSS\ after\ \"body\ \{\":\ expected\ \"\}\",\ was\ \"\{\"\n\ \ \ \ \ \ \ \ on\ line\ 5\ of\ stdin\n>>\ body\ \{\ \{\n\ \ \ ------^\n errorLine 5 errorColumn 7} 1 {expected boolean value but got "x"}}

###############################################################################

test sass-4.10 {option indent (string)} -body {
  list [catch {
    sass compile -options [list indent **] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 0 outputString {body {
**font: 100% Helvetica, sans-serif;
**color: #333;
**width: 31.123456%; }
}}}

###############################################################################

test sass-4.11 {option linefeed (string)} -body {
  list [catch {
    sass compile -options [list linefeed **] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 0 outputString {body {**  font: 100% Helvetica,\
sans-serif;**  color: #333;**  width: 31.123456%; }**}}}

###############################################################################

test sass-4.12 {option input_path (string)} -body {
  list [catch {
    sass compile -options [list input_path $path] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list input_path ""] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31.123456%; }
}} 0 {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31.123456%; }
}}}

###############################################################################

test sass-4.13 {option output_path (string)} -body {
  list [catch {
    sass compile -options [list output_path $path] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list output_path ""] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31.123456%; }
}} 0 {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31.123456%; }
}}}

###############################################################################

#
# NOTE: The function associated with this option was removed from "libsass"
#       in a recent commit, see:
#
#       https://github.com/sass/libsass/commit/c82c82bf6f
#
#       The "image_path" option itself is being retained; however, it will
#       always raise a script error.
#
test sass-4.14 {option image_path (string)} -body {
  list [catch {
    sass compile -options [list image_path $path] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list image_path ""] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {1 {option "image_path" has no setter} 1 {option "image_path" has no\
setter}}

###############################################################################

test sass-4.15 {option include_path (string)} -body {
  list [catch {
    sass compile -options [list include_path $path] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list include_path ""] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -result {0 {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31.123456%; }
}} 0 {errorStatus 0 outputString {body {
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31.123456%; }
}}}

###############################################################################

test sass-4.16 {option source_map_file (string)} -body {
  list [catch {
    sass compile -options [list source_map_file [file join \
        [getTempPath] sass-4.16.map]] $scss(2)
  } errMsg] $errMsg [catch {
    sass compile -options [list source_map_file ""] $scss(2)
  } errMsg] $errMsg
} -cleanup {
  unset -nocomplain errMsg
} -match regexp -result {^0 \{errorStatus 0 outputString \{body \{
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31\.123456%; \}

/\*# sourceMappingURL=(?:.*?)/sass-4\.16\.map \*/\} sourceMapString \{\{
	"version": 3,
	"file": "(?:.*?)",
	"sources": \[
		"(?:.*?)"
	\],
	"names": \[\],
	"mappings": "(?:.*?)"
\}\}\} 0 \{errorStatus 0 outputString \{body \{
  font: 100% Helvetica, sans-serif;
  color: #333;
  width: 31\.123456%; \}
\}\}$}

###############################################################################

unset -nocomplain scss path

# cleanup
::tcltest::cleanupTests
return
